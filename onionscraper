#!/bin/bash

# Look for new ROMs since the last run.

##### Config #####
# Don't edit the configuration in this file as it would be overwritten on updates.
# Create the file .config/onionos_helpers.conf and override the variables.

module=screenscraper
#module=thegamesdb
exclude=("android")

##################
if [[ -f ~/.config/onionos_helpers.conf ]]; then
    source ~/.config/onionos_helpers.conf
fi

skip_in="unattendskip"
skip_out="unattend"
import="false"
clean="false"
dryrun="false"

#---------------
lastrun=~/.skyscraper/onionos_scrape.lastrun 

function usage() {
    echo "Usage: $0 [OPTIONS] [PLATFORMS]"
    echo "Find all the new ROMs since the last run of the script and"
    echo "call Skyscraper for the required platforms."
    echo "options:"
    echo "  -a --all:    check all platforms instead of just the ones with new ROMs."
    echo "  -c --clean:  remove images for deleted games."
    echo "  -d --dry-run with clean, find but don't delete images."
    echo "  -i --import: import manually added assets."
    echo "  -s --skip:   skip existing output files."
    echo "  -h --help:   this help."
    exit 0
}

function scrape_platform() {
    echo "(Skyscraper platform: $platform)"

    Skyscraper -p ${platform} -s ${module} \
        -i $rompath/$system \
        --flags $skip_in
    Skyscraper -p ${platform} \
        -i $rompath/$system -o $rompath/$system/Imgs \
        --flags $skip_out
    mv $rompath/$system/Imgs/screenshots/* $rompath/$system/Imgs/
    rmdir $rompath/$system/Imgs/covers \
          $rompath/$system/Imgs/marquees \
          $rompath/$system/Imgs/screenshots \
          $rompath/$system/Imgs/textures \
          $rompath/$system/Imgs/wheels

    sed -i 's/Imgs\/screenshots/Imgs/g' $rompath/$system/gamelist.xml
    if ! xmlstarlet_loc="$(type -p "xmlstarlet")" || [[ -z $xmlstarlet_loc ]]; then
        mv $rompath/$system/gamelist.xml $rompath/$system/miyoogamelist.xml
    else
        xmlstarlet  edit -d "//desc" -d "//rating" -d "//genre" -d "//players" -d "//releasedate" -d "//developer" -d "//publisher" -d "//hash" -d "//thumbnail" -d "//genreid" -d "//marquee" -d "//texture" -d "//video" --subnode "gameList/game[not(image)]" -t elem -n image -v "no-img.png" $rompath/$system/gamelist.xml > $rompath/$system/miyoogamelist.xml
        rm $rompath/$system/gamelist.xml
    fi
}

function find_match {
    platform=$1
    asset=$2
    game=${asset#$pdir$adir/}
    game=${game%.*}
    game="$(printf '%q' "${game}")" # escapes special characters
    res=$(find "$rompath/$platform" -name "${game}.*" |wc -l)
    if [[ "$res" == "0" ]]; then
        echo "rm \"$asset\"" >> $orphansfile
    fi
}

function clean_assets() {

    for pdir in $rompath/*/
    do

        system=$(basename $pdir)
        if [[ "$systems" != "" ]]; then
            if [[ ! " $systems " =~ " $system " ]]; then       
                continue
            fi
        fi
        echo Cleaning $system
        for asset in ${pdir}Imgs/*
        do
            # Special case: directory is empty
            if [[ "$asset" != "${pdir}Imgs/*" ]]; then
                game=${asset#${pdir}Imgs/}
                game=${game%.*}
                game="$(printf '%q' "${game}")" # escapes special characters
                #res=$(find "$rompath/$system" -name "${game}.*" |wc -l)
                res=$(find "$rompath/$system" -maxdepth 1 -name "${game}.*" |wc -l)
                if [[ "$res" == "0" ]]; then
                    if [[ "$dryrun" == "true" ]]; then
                        echo "ORPHANED ARTWORK: $asset"
                    else
                        echo "DELETING $asset"
                        rm "$asset"
                    fi
                fi

            fi

        done
    done
    exit 0
}

while [[ "$1" = "-"* ]]; do
    if [[ "$1" = "--help" || "$1" = "-h"  ]]; then
        usage
    elif [[ "$1" == "--all" || "$1" == "-a" ]]; then
        echo "Scanning all platforms."
        rm -f $lastrun
        shift
    elif [[ "$1" == "-s" || "$1" == "--skip" ]]; then
        skip_out="unattendskip"
        shift
    elif [[ "$1" == "-i" || "$1" == "--import" ]]; then
        import="true"
        module="import"
        skip_in="unattend"
        shift
    elif [[ "$1" == "-c" || "$1" == "--clean" ]]; then
        clean="true"
        shift
    elif [[ "$1" == "-d" || "$1" == "--dry-run" ]]; then
        dryrun="true"
        shift
    else
        echo "Unsupported option $1."
        shift
    fi
done

# remaining parameters are systems to scrape
systems="$@"

#---------------

inputline=$(grep -m 1 inputFolder ~/.skyscraper/config.ini)
rompath=${inputline##*=}
rompath="${rompath%\"}"
rompath="${rompath#\"}"

if [[ "$clean" == "true" ]]; then
    clean_assets
fi

if [ ! -f ${lastrun} ]; then
    echo "First run: this could take a long time..."
    # create a lastrun file far in the past to scan everything
    touch -d "1/1/1970" ${lastrun}
fi

if [[ "$systems" == "" ]]; then
    echo Looking for new ROMs in $rompath

    systems=$(find ${rompath} -mindepth 2 -maxdepth 2 -type f -cnewer ${lastrun} -exec sh -c 'basename $(dirname "$0")' {} \; | sort | uniq)

    if [[ "$systems" == "" ]];then
        echo "No new game found."
        exit 0
    fi
fi

skip=false
for system in $systems
do
    for i in "${exclude[@]}"
    do
        if [ "$i" == "$system" ] ; then
            echo "Skipping $system"
            skip=true
        fi
    done
    if ! $skip ; then
        echo -n "Processing $system ... "

        # convert the Miyoo system into a Skyscraper platform
        declare -A systemlist
        systemlist[AMIGA]=amiga
        systemlist[CPC]=amstradcpc
        systemlist[ARCADE]=mame-libretro
        systemlist[ATARI]=atari2600
        systemlist[FIFTYTWOHUNDRED]=atari5200
        systemlist[SEVENTYEIGHTHUNDRED]=atari7800
        systemlist[LYNX]=atarilynx
        systemlist[WS]="wonderswan wonderswancolor"
        systemlist[COLECO]=coleco
        systemlist[VECTREX]=vextrex
        systemlist[INTELLIVISION]=intellivision
        systemlist[MSX]=msx
        systemlist[PCECD]=pcenginecd
        systemlist[PCE]=pcengine
        systemlist[FC]=nes
        systemlist[GB]="gb gbc"
        systemlist[GBC]=gbc
        systemlist[GBA]=gba
        systemlist[POKE]=pokemini
        systemlist[SFC]=snes
        systemlist[VB]=virtualboy
        systemlist[PICO]=pico8
        systemlist[PORTS]=ports
        systemlist[SCUMMVM]=scummvm
        systemlist[THIRTYTWOX]=sega32x
        systemlist[SEGACD]=segacd
        systemlist[GG]=gamegear
        systemlist[MD]=megadrive
        systemlist[MS]=mastersystem
        systemlist[SEGASGONE]=sg-1000
        systemlist[ZXS]=zxspectrum
        systemlist[NEOGEO]=neogeo
        systemlist[NEOCD]=neogeocd
        systemlist[NGP]="ngp ngpc"
        systemlist[PS]=psx
        systemlist[VIDEOPAC]=videopac

        platforms=${systemlist[$system]}
        if [[ "$platforms" == "" ]]; then
            echo "Unsupported system"
        else
            for platform in $platforms
            do
                scrape_platform
            done
        fi
    fi
    skip=false
done

# Update lastrun
touch ${lastrun}

# If launched from a Termux shortcut, closes automatically
# wait for a key press
#read -n 1 -r -s -p "Press any key to continue..." key
#echo ""

